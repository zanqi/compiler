/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
        return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
        return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

    let create_let(int lineno, Features l, Expression e) {
        let result = null;
        for (int i = l.getLength() - 1; i >= 0; i--) {
            attr a = (attr)l.getNth(i);
            result = new let(lineno, a.name, a.type_decl, a.init, result == null ? e : result);
        }
        return result;
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
        String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
                 ": syntax error at or near ");
        Utilities.printToken(cur_token);
        omerrs++;
        if (omerrs>50) {
            System.err.println("More than 50 errors");
            System.exit(1);
        }
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
    }
:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Features feature_list, let_stmt_list;
nonterminal Formals formal_list;
nonterminal Expression expr;
nonterminal Expressions param_list, block_expr_list;
nonterminal Cases case_list;

/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left DIV, MULT;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;

program	
    ::= class_list:cl
        {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
    /* single class */
    ::= class:c
        {: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
    /* several classes */
    | class_list:cl class:c
        {: RESULT = cl.appendElement(c); :}
    ;

/* If no parent is specified, the class inherits from the Object class */
class
    ::= CLASS TYPEID:n LBRACE feature_list:f RBRACE SEMI
        {: RESULT = new class_c(curr_lineno(), n, 
                           AbstractTable.idtable.addString("Object"), 
                   f, curr_filename()); :}
    | CLASS TYPEID:n INHERITS TYPEID:p LBRACE feature_list:f RBRACE SEMI
        {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
    | error SEMI
    ;

feature_list 
    ::= feature_list:fl OBJECTID:n COLON TYPEID:t SEMI
        {: RESULT = fl.appendElement(
            new attr(curr_lineno(), n, t, new no_expr(curr_lineno()))); :}
    | feature_list:fl OBJECTID:n COLON TYPEID:t ASSIGN expr:e SEMI
        {: RESULT = fl.appendElement(
            new attr(curr_lineno(), n, t, e)); :}
    | feature_list:fl OBJECTID:n LPAREN formal_list:fl2 RPAREN COLON TYPEID:t LBRACE expr:e RBRACE SEMI
        {: RESULT = fl.appendElement(
            new method(curr_lineno(), n, fl2, t, e)); :}
    | feature_list:fl error SEMI
        {: RESULT = fl; :}
    /* empty */
    | 
        {: RESULT = new Features(curr_lineno()); :}
    ;

let_stmt_list
    ::= OBJECTID:id COLON TYPEID:t
        {: RESULT = (new Features(curr_lineno())).appendElement(
            new attr(curr_lineno(), id, t, new no_expr(curr_lineno()))); :}
    | error
        {: RESULT = new Features(curr_lineno()); :}
    | OBJECTID:id COLON TYPEID:t ASSIGN expr:i
        {: RESULT = (new Features(curr_lineno())).appendElement(
            new attr(curr_lineno(), id, t, i)); :}
    | let_stmt_list:ll COMMA OBJECTID:id COLON TYPEID:t 
        {: RESULT = ll.appendElement(new attr(curr_lineno(), id, t, new no_expr(curr_lineno()))); :}
    | let_stmt_list:ll COMMA OBJECTID:id COLON TYPEID:t ASSIGN expr:i
        {: RESULT = ll.appendElement(new attr(curr_lineno(), id, t, i)); :}
    ;

formal_list
    /* single formal */
    ::= OBJECTID:n COLON TYPEID:t
        {: RESULT = (new Formals(curr_lineno())).appendElement(new formalc(curr_lineno(), n, t)); :}
    /* several formals */
    | formal_list:fl COMMA OBJECTID:n COLON TYPEID:t
        {: RESULT = fl.appendElement(new formalc(curr_lineno(), n, t)); :}
    /* empty */
    | 
        {: RESULT = new Formals(curr_lineno()); :}
    ;

param_list
    /* single expression */
    ::= expr:e
        {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    /* several expressions */
    | param_list:el COMMA expr:e
        {: RESULT = el.appendElement(e); :}
    /* empty */
    | 
        {: RESULT = new Expressions(curr_lineno()); :}
    ;

expr
    ::= OBJECTID:i ASSIGN expr:e
        {: RESULT = new assign(curr_lineno(), i, e); :}
    | INT_CONST:i
        {: RESULT = new int_const(curr_lineno(), i); :}
    | STR_CONST:s
        {: RESULT = new string_const(curr_lineno(), s); :}
    | BOOL_CONST:b
        {: RESULT = new bool_const(curr_lineno(), b); :}
    | OBJECTID:o
        {: RESULT = new object(curr_lineno(), o); :}
    | ISVOID expr:e
        {: RESULT = new isvoid(curr_lineno(), e); :}
    | expr:e1 PLUS expr:e2
        {: RESULT = new plus(curr_lineno(), e1, e2); :}
    | expr:e1 MINUS expr:e2
        {: RESULT = new sub(curr_lineno(), e1, e2); :}
    | expr:e1 MULT expr:e2
        {: RESULT = new mul(curr_lineno(), e1, e2); :}
    | expr:e1 DIV expr:e2
        {: RESULT = new divide(curr_lineno(), e1, e2); :}
    | NEG expr:e
        {: RESULT = new neg(curr_lineno(), e); :}
    | expr:e1 LT expr:e2
        {: RESULT = new lt(curr_lineno(), e1, e2); :}
    | expr:e1 LE expr:e2
        {: RESULT = new leq(curr_lineno(), e1, e2); :}
    | expr:e1 EQ expr:e2
        {: RESULT = new eq(curr_lineno(), e1, e2); :}
    | NOT expr:e
        {: RESULT = new comp(curr_lineno(), e); :}
    | expr:e1 AT TYPEID:t DOT OBJECTID:o LPAREN param_list:el RPAREN
        {: RESULT = new static_dispatch(curr_lineno(), e1, t, o, el); :}
    | expr:e1 DOT OBJECTID:o LPAREN param_list:el RPAREN
        {: RESULT = new dispatch(curr_lineno(), e1, o, el); :}
    | OBJECTID:id LPAREN param_list:el RPAREN
        {: RESULT = new dispatch(curr_lineno(), new object(curr_lineno(), AbstractTable.idtable.addString("self")), id, el); :}
    | OBJECTID:id LPAREN error RPAREN
    | IF expr:e1 THEN expr:e2 ELSE expr:e3 FI
        {: RESULT = new cond(curr_lineno(), e1, e2, e3); :}
    | WHILE expr:e1 LOOP expr:e2 POOL
        {: RESULT = new loop(curr_lineno(), e1, e2); :}
    | LET let_stmt_list:l IN expr:e
        {: RESULT = create_let(curr_lineno(), l, e); :} 
    | CASE expr:e OF case_list:cl ESAC
        {: RESULT = new typcase(curr_lineno(), e, cl); :}
    | NEW TYPEID:t
        {: RESULT = new new_(curr_lineno(), t); :}
    | LBRACE block_expr_list:el RBRACE
        {: RESULT = new block(curr_lineno(), el); :}
    | LPAREN expr:e RPAREN
        {: RESULT = e; :}
    ;

block_expr_list
    /* single expression */
    ::= expr:e SEMI
        {: RESULT = (new Expressions(curr_lineno())).appendElement(e); :}
    | error SEMI 
        {: RESULT = new Expressions(curr_lineno()); :}
    /* several expressions */
    | block_expr_list:el expr:e SEMI
        {: RESULT = el.appendElement(e); :}
    ;

case_list
    /* single case */
    ::= OBJECTID:id COLON TYPEID:t DARROW expr:e SEMI
        {: RESULT = (new Cases(curr_lineno())).appendElement(new branch(curr_lineno(), id, t, e)); :}
    /* several cases */
    | case_list:cl OBJECTID:id COLON TYPEID:t DARROW expr:e SEMI
        {: RESULT = cl.appendElement(new branch(curr_lineno(), id, t, e)); :}
    ;
